/*
 * JXMLValidator -- command line XML tool to validate files to schema
 * Copyright (C) 2013  Geoff Williams<geoff@geoffwilliams.me.uk>
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package uk.me.geoffwilliams.jxmlvalidator;

import java.awt.Color;
import java.io.File;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import org.slf4j.LoggerFactory;
import org.slf4j.Logger;

/**
 *
 * @author geoff
 */
public class ValidatorUI extends javax.swing.JPanel {

    private History history = new History();
    private Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * Creates new form ValidatorUI
     */
    public ValidatorUI() {
        initComponents();
        updateHistory();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        validateButton = new javax.swing.JButton();
        inputUriBox = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        clearResultsButton = new javax.swing.JButton();
        clearHistoryButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultBox = new javax.swing.JTextArea();
        progressBar = new javax.swing.JProgressBar();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        historyList = new javax.swing.JList();
        jSeparator1 = new javax.swing.JSeparator();
        statusLabel = new javax.swing.JLabel();

        validateButton.setText("Validate");
        validateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validateButtonActionPerformed(evt);
            }
        });

        inputUriBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputUriBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Filename/URL");

        jLabel2.setText("History");

        jLabel3.setText("Results");

        clearResultsButton.setText("Clear Results");
        clearResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearResultsButtonActionPerformed(evt);
            }
        });

        clearHistoryButton.setText("Clear History");
        clearHistoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearHistoryButtonActionPerformed(evt);
            }
        });

        resultBox.setColumns(20);
        resultBox.setRows(5);
        jScrollPane1.setViewportView(resultBox);

        jButton1.setText("Browse...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        historyList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        historyList.setFixedCellWidth(historyList.getWidth());
        historyList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                historyListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(historyList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(validateButton)
                        .addGap(35, 35, 35)
                        .addComponent(clearResultsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 135, Short.MAX_VALUE)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(inputUriBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(clearHistoryButton)
                            .addComponent(jLabel1))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputUriBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearHistoryButton)
                .addGap(17, 17, 17)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(validateButton)
                        .addComponent(clearResultsButton))
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 16, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusLabel))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void inputUriBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputUriBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputUriBoxActionPerformed

    public void setInputUri(String uri) {
        inputUriBox.setText(uri);
    }

    private void clearResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearResultsButtonActionPerformed
        clearResultsBox();
    }//GEN-LAST:event_clearResultsButtonActionPerformed

    private void clearResultsBox() {
        resultBox.setBackground(Color.WHITE);
        resultBox.setText("");
        statusLabel.setText("");
    }

    private void updateHistory() {
        historyList.removeAll();
        DefaultListModel listModel = new DefaultListModel();
        for (String item : history.getHistoryList()) {
            listModel.addElement(item);
        }
        historyList.setModel(listModel);
    }

    private void displayValidationResult(ErrorReport errorReport) {
        if (errorReport.isValid()) {
            resultBox.setBackground(Color.GREEN);
            resultBox.setText("***** VALID XML :D ***");
            statusLabel.setText("valid XML!");
        } else {
            resultBox.setBackground(Color.ORANGE);
            resultBox.setText("***** INVALID XML DETECTED! :`( *****\n\n\n" + errorReport.toString());
            statusLabel.setText("invalid XML");
        }
    }

    private void validateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validateButtonActionPerformed
        clearResultsBox();
        final String uri = inputUriBox.getText();

        if (uri.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a file or URL to validate or pick one from your history");
        } else {
            statusLabel.setText("validating...");
            progressBar.setIndeterminate(true);
            SwingWorker swingWorker = new SwingWorker() {
                @Override
                protected Object doInBackground() throws Exception {

                    Validator validator = new Validator();
                    if (validator.validate(uri) == App.STATUS_EXCEPTION) {
                        statusLabel.setText(validator.getExceptionMessage());
                    } else {
                        // validation didn't thow exception, save to history
                        history.save(uri);
                        updateHistory();

                        // display the result of validation...
                        ErrorReport errorReport = validator.getValidationErrorHandler();
                        displayValidationResult(errorReport);
                    }
                    progressBar.setIndeterminate(false);
                    return null;
                }
            };
            swingWorker.execute();
        }

    }//GEN-LAST:event_validateButtonActionPerformed

    private void clearHistoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearHistoryButtonActionPerformed
        history.clear();
        updateHistory();
    }//GEN-LAST:event_clearHistoryButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        final JFileChooser fc = new JFileChooser();
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            inputUriBox.setText(file.getAbsolutePath());
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void historyListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_historyListMouseClicked
        if (historyList.getModel().getSize() > 0) {
            int index = historyList.locationToIndex(evt.getPoint());

            String selection = (String) historyList.getModel().getElementAt(index);
            logger.debug("selected item from history: {}", selection);
            inputUriBox.setText(selection);
        }
    }//GEN-LAST:event_historyListMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearHistoryButton;
    private javax.swing.JButton clearResultsButton;
    private javax.swing.JList historyList;
    private javax.swing.JTextField inputUriBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTextArea resultBox;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JButton validateButton;
    // End of variables declaration//GEN-END:variables
}
